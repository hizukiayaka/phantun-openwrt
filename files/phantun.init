#!/bin/sh /etc/rc.common
# This is free software, licensed under the GNU General Public License v2.
# See /LICENSE for more information.

START=90
STOP=10

USE_PROCD=1
CLIENT_PROG=/usr/sbin/phantun-client
SERVER_PROG=/usr/sbin/phantun-server

LIST_SEP="
"

. /lib/functions/network.sh

section_enabled() {
	config_get_bool enable  "$1" 'enable'  0
	config_get_bool enabled "$1" 'enabled' 0
	[ $enable -gt 0 ] || [ $enabled -gt 0 ]
}

add_client_nft() {
	local s="$1"
	local IFF="$2"
	local OFF="$3"

	chains="{ type nat hook postrouting priority srcnat; policy accept; iifname $IFF oif $OFF masquerade; }"
	nft add chain inet fw4 $s $chains
}

start_client_instance() {
	local s="$1"

	local listen remote device local peer network ipv6 xor
	config_get listen "$s" listen
	config_get remote "$s" remote
	config_get device "$s" device
	config_get local "$s" local
	config_get peer "$s" peer
	config_get network "$s" network 'wan'
	config_get_bool ipv6 "$s" ipv6 0
	config_get xor "$s" xor ''

	procd_open_instance $s
	procd_set_param command "$CLIENT_PROG"	\
	    -l $listen \
	    -r $remote \
	    --tun $device \
	    --tun-local $local \
	    --tun-peer $peer

	if [ $ipv6 -eq 0 ]; then
	    procd_append_param command "-4"
	fi

	if [ -n "$xor" ]; then
	    procd_append_param command --xor $xor
	fi

	procd_close_instance

	#network_get_physdev out_device $network
	#add_client_nft $s $device $out_device
}

start_server_instance() {
	local s="$1"

	local listen remote device local peer network ipv6 xor
	config_get listen "$s" listen
	config_get remote "$s" remote
	config_get device "$s" device
	config_get local "$s" local
	config_get peer "$s" peer
	config_get network "$s" network 'wan'
	config_get_bool ipv6 "$s" ipv6 0
	config_get xor "$s" xor ''

	procd_open_instance $s
	procd_set_param command "$SERVER_PROG"	\
	    -l $listen \
	    -r $remote \
	    --tun $device \
	    --tun-local $local \
	    --tun-peer $peer

	if [ $ipv6 -eq 0 ]; then
	    procd_append_param command "-4"
	fi

	if [ -n "$xor" ]; then
	    procd_append_param command --xor $xor
	fi

	procd_close_instance
}

start_instance() {
	local s="$1"

	section_enabled "$s" || return 1

	local type
	config_get type "$s" type

	case "$type" in
	    client)
		start_client_instance "$s"
		;;
	    server)
		start_server_instance "$s"
		;;
	esac
}

start_service() {
	local instance="$1"
	local instance_found=0

	config_cb() {
		local type="$1"
		local name="$2"
		if [ "$type" = "client" ]; then
			if [ -n "$instance" -a "$instance" = "$name" ]; then
				instance_found=1
			fi
		fi
	}

	config_load 'phantun'

	if [ -n "$instance" ]; then
		[ "$instance_found" -gt 0 ] || return
		start_instance "$instance"
	else
		config_foreach start_instance 'client'
		config_foreach start_instance 'server'
	fi
}

clean_instance() {
	local s="$1"

	section_enabled "$s" || return 1
	nft delete chain inet fw4 $s
}

#service_stopped() {
	#config_foreach clean_instance 'client'
#}

service_triggers() {
	procd_add_reload_trigger phantun
}

